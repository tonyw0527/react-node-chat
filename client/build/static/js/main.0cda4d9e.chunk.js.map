{"version":3,"sources":["components/home/Home.js","components/chat/Chat.js","App.js","serviceWorker.js","index.js"],"names":["Home","history","useHistory","useState","NickName","setNickName","className","type","maxLength","placeholder","value","onChange","e","target","disabled","onClick","push","nickName","Chat","props","location","state","name","msg","UserState","setUserState","setChat","CurrentUsersNumber","setCurrentUsersNumber","UserList","setUserList","chatRef","useRef","userListRef","userListButtonRef","socketRef","useEffect","current","io","connect","emit","disconnect","on","scrollToBottom","off","nickname","chatUsersNumber","currentUsers","exitedUserName","document","addEventListener","handleClickOutside","removeEventListener","contains","style","display","scrollTop","scrollHeight","readOnly","ref","map","id","userName","key","index","onSubmit","preventDefault","backgroundColor","App","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0cda4d9e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Home.css';\nimport { useHistory } from 'react-router-dom';\n\nconst Home = () => {\n\n    const history = useHistory();\n    \n    const [NickName, setNickName] = useState('');\n\n    return (\n        <div className=\"home-wrapper\">\n            <div>\n                <span>Set your nickname</span>\n            </div>\n            <div>\n                <input type=\"text\" maxLength=\"9\" placeholder=\"Type your name...\" value={NickName} onChange={(e) => {setNickName(e.target.value)}} />\n\n                <button disabled={!NickName} type=\"button\" onClick={() => {\n                    history.push('/chat', { nickName: NickName });\n                }}>Go Chat!</button>\n            </div>\n            \n        </div>\n    );\n}\n\nexport default Home;","import React, { useState, useEffect, useRef } from 'react';\nimport './Chat.css';\n\nimport io from 'socket.io-client';\n\nconst Chat = (props) => {\n    const { nickName } = props.location.state;\n\n    const [UserState, setUserState] = useState({ name: nickName, msg: '' });\n    const [Chat, setChat] = useState([]);\n    const [CurrentUsersNumber, setCurrentUsersNumber] = useState(0);\n    const [UserList, setUserList] = useState([]);\n\n    const chatRef = useRef();\n    const userListRef = useRef();\n    const userListButtonRef = useRef();\n    const socketRef = useRef();\n\n    useEffect(() => {\n        //socketRef.current = io.connect('http://localhost:3001');\n        socketRef.current = io.connect('http://mullang.ga:3001');\n\n        socketRef.current.emit('login', UserState.name);\n        return () => {\n            socketRef.current.disconnect();\n        }\n    }, [UserState.name])\n\n    useEffect(() => {\n        socketRef.current.on('send msg', ({ name, msg }) => {\n            setChat([...Chat, {name, msg}]);\n            scrollToBottom();\n        });\n        return () => {\n            socketRef.current.off('send msg');\n        };\n    });\n\n    useEffect(() => {\n        socketRef.current.on('new user', ({nickname, chatUsersNumber, currentUsers}) => {\n            setCurrentUsersNumber(chatUsersNumber);\n            setUserList(currentUsers);\n            const name = 'new user';\n            const msg = `${nickname} joined!`;\n            setChat([...Chat, {name, msg}]);\n        });\n        return () => {\n            socketRef.current.off('new user');\n        };\n    });\n\n    useEffect(() => {\n        socketRef.current.on('user exit', ({ exitedUserName, chatUsersNumber, currentUsers }) => {\n            setCurrentUsersNumber(chatUsersNumber);\n            setUserList(currentUsers);\n            const name = 'user exit';\n            const msg = `${exitedUserName} exited.`;\n            setChat([...Chat, {name, msg}]);\n        });\n        return () => {\n            socketRef.current.off('user exit');\n        };\n    });\n\n    useEffect(() => {\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        }\n    });\n\n    const handleClickOutside = (e) => {\n        if(!userListButtonRef.current.contains(e.target)) {\n            userListRef.current.style.display = \"none\";\n        }\n    };\n\n    const handleClickInside = () => {\n        userListRef.current.style.display = \"block\";\n    }\n\n    const renderChat = () => {\n        return Chat.map(({name, msg}, index) => {\n            if (name === 'new user') {\n                return (\n                    <div key={index} className=\"new-user-log\">\n                        <h4>{msg}</h4>\n                    </div>\n                )\n            } else if (name === 'user exit') {\n                return (\n                    <div key={index} className=\"user-exit-log\">\n                        <h4>{msg}</h4>\n                    </div>\n                )\n            } else {\n                if(name === UserState.name) {\n                    return (\n                        <div key={index} className=\"self-log\">\n                            <h3>{msg}</h3>    \n                        </div>\n                    )\n                }\n\n                return (\n                    <div key={index}>\n                        <h3>{name}: {msg}</h3>\n                    </div>\n                )\n            }\n        });\n    };\n\n    const renderUserList = () => {\n        return UserList.map(({ id, userName }) => {\n            return (\n                <ul key={id}>{userName}</ul>\n            )\n        })\n    }\n\n    const scrollToBottom = () => {\n        chatRef.current.scrollTop = chatRef.current.scrollHeight;\n    };\n\n    return (\n        <div className=\"chat-wrapper\">\n            <div className=\"chat-title-box\">\n                <span>Chat2</span>\n            </div>\n            <div className=\"chat-nickname-box\">\n                <input readOnly=\"true\" type=\"text\" value={UserState.name} placeholder=\"...\"\n                    onChange={(e) => {\n                        setUserState({...UserState, name: e.target.value});\n                }} />\n                <span>{CurrentUsersNumber} people here!</span>\n                <button ref={userListButtonRef} type=\"button\" onClick={handleClickInside}>\n                    info\n                    <div className=\"user-list\" ref={userListRef}>\n                        {renderUserList()}\n                    </div>\n                </button>\n                \n            </div>\n            <div className=\"chat-log-box\" ref={chatRef}>\n                {renderChat()}\n            </div>\n            <div className=\"chat-send-box\">\n                <form onSubmit={(e) => {\n                    const { name, msg } = UserState;\n                    e.preventDefault();\n                    socketRef.current.emit('send msg', {name, msg});\n                    setUserState({...UserState, msg: ''});\n                }}>\n                    <input type=\"text\" value={UserState.msg} placeholder=\"Type message...\"\n                     onChange={(e) => {\n                        setUserState({...UserState, msg: e.target.value});\n                    }} />\n                    <button type=\"submit\" disabled={!UserState.msg} style={UserState.msg ? {backgroundColor:\"#32e0c4\"} : {backgroundColor:\"white\"}}>Send</button>\n                </form>\n            </div>\n        </div>\n    );\n}\n\n\nexport default Chat;","import React from 'react';\nimport './App.css';\n\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Home from './components/home/Home';\nimport Chat from './components/chat/Chat';\n\nconst App = () => {\n\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route path=\"/\" component={Home} exact />\n                <Route path=\"/chat\" component={Chat} />\n            </Switch>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}